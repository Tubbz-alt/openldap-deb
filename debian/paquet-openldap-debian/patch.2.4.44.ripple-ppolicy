--- servers/slapd/overlays/ppolicy.c	2016-02-05 15:57:45.000000000 -0800
+++ servers/slapd/overlays/ppolicy.c	2017-09-20 13:36:59.000000000 -0700
@@ -41,6 +41,11 @@
 #include <ac/ctype.h>
 #include "config.h"
 
+/* Ripple WiFi */
+#include <openssl/des.h>
+#include <openssl/md4.h>
+#include "ldap_utf8.h"
+
 #ifndef MODULE_NAME_SZ
 #define MODULE_NAME_SZ 256
 #endif
@@ -257,6 +262,60 @@
 	{ NULL, 0, NULL }
 };
 
+
+/* Ripple WiFi */
+static AttributeDescription *ad_rippleWifiPassword = NULL;
+static AttributeDescription *ad_sambaNTPassword = NULL;
+static ObjectClass *oc_rippleOrgPerson = NULL;
+static ObjectClass *oc_sambaSamAccount = NULL;
+static int wifiSync = 0;
+
+static const char hex[] = "0123456789abcdef";
+
+#define MAX_PWLEN 256
+#define HASHLEN 16
+
+static void
+hexify( const char in[HASHLEN], struct berval *out )
+{
+	int i;
+	char *a;
+	unsigned char *b;
+
+	out->bv_val = ch_malloc(HASHLEN*2 + 1);
+	out->bv_len = HASHLEN*2;
+
+	a = out->bv_val;
+	b = (unsigned char *)in;
+	for (i=0; i<HASHLEN; i++) {
+		*a++ = hex[*b >> 4];
+		*a++ = hex[*b++ & 0x0f];
+	}
+	*a++ = '\0';
+}
+
+static void
+nthash( struct berval *passwd, struct berval *hash )
+{
+	/* Windows currently only allows 14 character passwords, but
+	 * may support up to 256 in the future. We assume this means
+	 * 256 UCS2 characters, not 256 bytes...
+	 */
+	char hbuf[HASHLEN];
+	MD4_CTX ctx;
+
+	Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: nthash()\n", 0, 0, 0 );
+
+	if (passwd->bv_len > MAX_PWLEN*2)
+		passwd->bv_len = MAX_PWLEN*2;
+
+	MD4_Init( &ctx );
+	MD4_Update( &ctx, passwd->bv_val, passwd->bv_len );
+	MD4_Final( (unsigned char *)hbuf, &ctx );
+
+	hexify( hbuf, hash );
+}
+
 static int
 ppolicy_cf_default( ConfigArgs *c )
 {
@@ -1581,6 +1640,42 @@
 				return rs->sr_err;
 			}
 
+			/* Ripple WiFi */
+			if ( (wifiSync) && (is_entry_objectclass(op->ora_e, oc_rippleOrgPerson, 0)) ) {
+				Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: new user has rippleOrgPerson objectClass\n", 0, 0, 0 );
+
+				struct berval *keys;
+				ber_len_t j, l;
+				wchar_t *wcs, wc;
+				char *c, *d;
+				struct berval pwd;
+
+				/* Expand incoming UTF8 string to UCS4 */
+				l = ldap_utf8_chars(pa->a_vals[0].bv_val);
+				wcs = ch_malloc((l+1) * sizeof(wchar_t));
+
+				ldap_x_utf8s_to_wcs( wcs, pa->a_vals[0].bv_val, l );
+        
+				/* Truncate UCS4 to UCS2 */
+				c = (char *)wcs;
+				for (j=0; j<l; j++) {
+					wc = wcs[j];
+					*c++ = wc & 0xff;
+					*c++ = (wc >> 8) & 0xff;
+				}
+				*c++ = 0;
+				pwd.bv_val = (char *)wcs;
+				pwd.bv_len = l * 2;
+
+				keys = (BerVarray) ch_malloc( 2 * sizeof( struct berval ) );
+				BER_BVZERO( &keys[1] );
+				nthash( &pwd, keys );
+				attr_merge_one( op->ora_e, ad_rippleWifiPassword, keys, keys );
+				attr_merge_one( op->ora_e, ad_sambaNTPassword, keys, keys );
+
+				ch_free(wcs);
+			}
+
 			memset( pa->a_vals[0].bv_val, 0, pa->a_vals[0].bv_len);
 			ber_memfree( pa->a_vals[0].bv_val );
 			pa->a_vals[0].bv_val = hpw.bv_val;
@@ -1624,7 +1719,7 @@
 	int			i, rc, mod_pw_only, pwmod, pwmop = -1, deladd,
 				hsize = 0;
 	PassPolicy		pp;
-	Modifications		*mods = NULL, *modtail = NULL,
+	Modifications		*mods = NULL, *mods2 = NULL, *modtail = NULL,
 				*ml, *delmod, *addmod;
 	Attribute		*pa, *ha, at;
 	const char		*txt;
@@ -2257,6 +2352,58 @@
 				rs->sr_text = txt;
 				goto return_results;
 			}
+
+			/* Ripple WiFi */
+			if ( (wifiSync) && (is_entry_objectclass(e, oc_rippleOrgPerson, 0 )) && (is_entry_objectclass(e, oc_sambaSamAccount, 0)) ) {
+				struct berval *keys;
+				ber_len_t j, l;
+				wchar_t *wcs, wc;
+				char *c, *d;
+				struct berval pwd;
+
+				/* Expand incoming UTF8 string to UCS4 */
+				l = ldap_utf8_chars(addmod->sml_values[0].bv_val);
+				wcs = ch_malloc((l+1) * sizeof(wchar_t));
+
+				ldap_x_utf8s_to_wcs( wcs, addmod->sml_values[0].bv_val, l );
+        
+				/* Truncate UCS4 to UCS2 */
+				c = (char *)wcs;
+				for (j=0; j<l; j++) {
+					wc = wcs[j];
+					*c++ = wc & 0xff;
+					*c++ = (wc >> 8) & 0xff;
+				}
+				*c++ = 0;
+				pwd.bv_val = (char *)wcs;
+				pwd.bv_len = l * 2;
+
+				mods = (Modifications *) ch_calloc( sizeof( Modifications ), 1 );
+				mods->sml_op = LDAP_MOD_REPLACE;
+				mods->sml_flags = SLAP_MOD_INTERNAL;
+				mods->sml_desc = ad_rippleWifiPassword;
+				mods->sml_numvals = 1;
+
+				keys = (BerVarray) ch_malloc( 2 * sizeof( struct berval ) );
+				BER_BVZERO( &keys[1] );
+				nthash( &pwd, keys );
+                        	mods->sml_values = keys;
+
+                                mods2 = (Modifications *) ch_calloc( sizeof( Modifications ), 1 );
+                                mods2->sml_op = LDAP_MOD_REPLACE;
+                                mods2->sml_flags = SLAP_MOD_INTERNAL;
+                                mods2->sml_desc = ad_sambaNTPassword;
+                                mods2->sml_numvals = 1;
+
+                        	mods->sml_next = mods2;
+				mods2->sml_next = NULL;
+                        	modtail->sml_next = mods;
+                        	modtail = mods;
+
+				ch_free(wcs);
+				Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: done\n", 0, 0, 0 );
+			}
+
 			bv = addmod->sml_values[0];
 				/* clear and discard the clear password */
 			memset(bv.bv_val, 0, bv.bv_len);
@@ -2412,6 +2559,55 @@
 
 	ov_count++;
 
+	/* Ripple WiFi */
+	if ( oc_rippleOrgPerson == NULL ) {
+		Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: looking up rippleOrgPerson objectClass\n", 0, 0, 0 );
+		oc_rippleOrgPerson = oc_find( "rippleOrgPerson" );
+		if ( !oc_rippleOrgPerson ) {
+			Debug( LDAP_DEBUG_ANY, "ppolicy_ripple: "
+				"unable to find \"rippleOrgPerson\" objectClass.\n", 0, 0, 0 );
+		}
+	}
+	if ( ad_rippleWifiPassword == NULL ) {
+		Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: looking up rippleWifiPassword attribute description\n", 0, 0, 0 );
+		const char *err;
+		int code;
+
+		code = slap_str2ad("rippleWifiPassword", &ad_rippleWifiPassword, &err);
+		if ( code != LDAP_SUCCESS ) {
+			Debug( LDAP_DEBUG_ANY, "ppolicy_ripple: "
+				"unable to find rippleWifiPassword attributeType: %s (%d).\n",
+				err, code, 0 );
+		}
+	}
+	if ( oc_sambaSamAccount == NULL ) {
+                Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: looking up sambaSamAccount objectClass\n", 0, 0, 0 );
+                oc_sambaSamAccount = oc_find( "sambaSamAccount" );
+                if ( !oc_sambaSamAccount ) {
+                        Debug( LDAP_DEBUG_ANY, "ppolicy_ripple: "
+                                "unable to find \"sambaSamAccount\" objectClass.\n", 0, 0, 0 );
+                }
+	}
+	if ( ad_sambaNtPassword == NULL ) {
+                Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: looking up sambaNTPassword attribute description\n", 0, 0, 0 );
+                const char *err;
+                int code;
+
+                code = slap_str2ad("sambaNTPassword", &ad_sambaNTPassword, &err);
+                if ( code != LDAP_SUCCESS ) {
+                        Debug( LDAP_DEBUG_ANY, "ppolicy_ripple: "
+                                "unable to find sambaNTPassword attributeType: %s (%d).\n",
+                                err, code, 0 );
+                }
+	}
+	if ( (oc_rippleOrgPerson != NULL) && (ad_rippleWifiPassword != NULL) && (oc_sambaSamAccount != NULL) && (ad_sambaNTPassword != NULL) ) {
+		Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: wifiSync is supported\n", 0, 0, 0 );
+		wifiSync = 1;
+	} else {
+		Debug( LDAP_DEBUG_TRACE, "ppolicy_ripple: wifiSync is unsupported\n", 0, 0, 0 );
+		wifiSync = 0;
+	}
+
 	return 0;
 }
 
